#!/usr/bin/env node

import { existsSync, writeFileSync } from 'node:fs';
import { resolve } from 'node:path';
import { DEFAULT_SERVERS } from './default-config.js';
import { scanDirectoryForExtensions } from './file-scanner.js';
import type { Config, LSPServerConfig } from './types.js';

/**
 * Generate a well-commented configuration file for cclsp
 */
export async function main(): Promise<void> {
  const configPath = resolve(process.cwd(), 'cclsp.json');

  // Check if config already exists
  if (existsSync(configPath)) {
    console.log('⚠️  Configuration file already exists: cclsp.json');
    console.log('   To regenerate, please remove the existing file first.');
    process.exit(1);
  }

  console.log('🔧 Initializing cclsp configuration...\n');

  // Scan for file extensions in the project
  console.log('📂 Scanning project for file types...');
  const extensions = await scanDirectoryForExtensions(process.cwd());

  if (extensions.size === 0) {
    console.log('   No source files found. Creating default configuration.\n');
  } else {
    console.log(
      `   Found ${extensions.size} file types: ${Array.from(extensions).slice(0, 10).join(', ')}${extensions.size > 10 ? '...' : ''}\n`
    );
  }

  // Filter relevant servers based on detected extensions
  const relevantServers: LSPServerConfig[] = [];
  const irrelevantServers: LSPServerConfig[] = [];

  for (const server of DEFAULT_SERVERS) {
    const hasRelevantExtension = server.extensions.some((ext) => extensions.has(ext));
    if (hasRelevantExtension || extensions.size === 0) {
      // Remove auto-restart by default
      const serverConfig = { ...server };
      serverConfig.restartInterval = undefined;
      relevantServers.push(serverConfig);
    } else {
      const serverConfig = { ...server };
      serverConfig.restartInterval = undefined;
      irrelevantServers.push(serverConfig);
    }
  }

  // Generate configuration with extensive comments
  const configContent = generateConfigWithComments(relevantServers, irrelevantServers);

  // Write configuration file
  writeFileSync(configPath, configContent, 'utf-8');

  console.log('✅ Configuration file created: cclsp.json\n');
  console.log('📝 Next steps:');
  console.log('   1. Review and customize the configuration as needed');
  console.log('   2. Install any required language servers (see comments in config)');
  console.log('   3. Set CCLSP_CONFIG_PATH environment variable if using MCP');
  console.log('\n💡 Tips:');
  console.log('   - TypeScript/JavaScript works out of the box (bundled)');
  console.log('   - Uncomment server configurations to enable them');
  console.log('   - Add custom servers for languages not included');
  console.log('   - Use "cclsp retry" to retry failed servers after installation');
}

function generateConfigWithComments(
  relevantServers: LSPServerConfig[],
  irrelevantServers: LSPServerConfig[]
): string {
  const lines: string[] = [];

  lines.push('{');
  lines.push('  // cclsp configuration file');
  lines.push('  // Generated by: cclsp init');
  lines.push('  // Documentation: https://github.com/ktnyt/cclsp');
  lines.push('  //');
  lines.push(
    '  // This file configures Language Server Protocol (LSP) servers for different file types.'
  );
  lines.push('  // Each server configuration includes:');
  lines.push('  //   - extensions: File extensions to handle');
  lines.push('  //   - command: Command to start the LSP server');
  lines.push('  //   - rootDir: Working directory (optional, defaults to current directory)');
  lines.push(
    '  //   - restartInterval: Auto-restart interval in minutes (optional, disabled by default)'
  );
  lines.push('  //   - initializationOptions: Server-specific options (optional)');
  lines.push('  ');
  lines.push('  "servers": [');

  // Add enabled servers (detected in project)
  if (relevantServers.length > 0) {
    lines.push('    // ==========================================');
    lines.push('    // ENABLED SERVERS (detected in your project)');
    lines.push('    // ==========================================');

    relevantServers.forEach((server, index) => {
      const isLast = index === relevantServers.length - 1 && irrelevantServers.length === 0;
      lines.push(...generateServerConfig(server, false, isLast));
    });
  }

  // Add disabled servers (not detected in project)
  if (irrelevantServers.length > 0) {
    lines.push('    ');
    lines.push('    // ==========================================');
    lines.push('    // AVAILABLE SERVERS (uncomment to enable)');
    lines.push('    // ==========================================');
    lines.push('    // The following servers are available but were not detected in your project.');
    lines.push('    // Uncomment any configuration to enable support for that language.');

    irrelevantServers.forEach((server, index) => {
      const isLast = index === irrelevantServers.length - 1;
      lines.push(...generateServerConfig(server, true, isLast));
    });
  }

  lines.push('  ]');
  lines.push('}');

  return lines.join('\n');
}

function generateServerConfig(
  server: LSPServerConfig,
  commented: boolean,
  isLast: boolean
): string[] {
  const lines: string[] = [];
  const prefix = commented ? '    // ' : '    ';
  const langName = getLanguageName(server.extensions[0] || '');
  const installCmd = getInstallCommand(server.command[0] || '');

  lines.push('    ');
  if (langName) {
    lines.push(`${prefix}// ${langName}`);
  }
  if (installCmd && server.command[0] !== 'npx') {
    lines.push(`${prefix}// Install: ${installCmd}`);
  }
  lines.push(`${prefix}{`);
  lines.push(`${prefix}  "extensions": ${JSON.stringify(server.extensions)},`);
  lines.push(
    `${prefix}  "command": ${JSON.stringify(server.command)}${server.rootDir || server.initializationOptions ? ',' : ''}`
  );

  if (server.rootDir) {
    lines.push(
      `${prefix}  "rootDir": "${server.rootDir}"${server.initializationOptions ? ',' : ''}`
    );
  }

  // Add commented restartInterval option
  lines.push(`${prefix}  // "restartInterval": 30  // Uncomment to auto-restart every 30 minutes`);

  if (server.initializationOptions) {
    lines.push(
      `${prefix}  "initializationOptions": ${JSON.stringify(server.initializationOptions, null, 2)
        .split('\n')
        .map((line, i) => (i === 0 ? line : `${prefix}  ${line}`))
        .join('\n')}`
    );
  }

  lines.push(`${prefix}}${!isLast ? ',' : ''}`);

  return lines;
}

function getLanguageName(extension: string): string {
  const languageMap: Record<string, string> = {
    ts: 'TypeScript/JavaScript',
    tsx: 'TypeScript/JavaScript',
    js: 'TypeScript/JavaScript',
    jsx: 'TypeScript/JavaScript',
    py: 'Python',
    go: 'Go',
    rs: 'Rust',
    java: 'Java',
    rb: 'Ruby',
    php: 'PHP',
    c: 'C/C++',
    cpp: 'C/C++',
    css: 'CSS/SCSS/LESS',
    html: 'HTML',
    json: 'JSON',
    yaml: 'YAML',
    yml: 'YAML',
    vue: 'Vue.js',
    svelte: 'Svelte',
    sh: 'Shell/Bash',
    dockerfile: 'Docker',
    md: 'Markdown',
  };
  return languageMap[extension] || '';
}

function getInstallCommand(command: string): string {
  const installMap: Record<string, string> = {
    pylsp: 'pip install python-lsp-server',
    gopls: 'go install golang.org/x/tools/gopls@latest',
    'rust-analyzer': 'rustup component add rust-analyzer',
    clangd: 'apt install clangd OR brew install llvm',
    jdtls: 'Download from Eclipse JDT releases',
    solargraph: 'gem install solargraph',
    intelephense: 'npm install -g intelephense',
    'docker-langserver': 'npm install -g dockerfile-language-server-nodejs',
  };
  return installMap[command] || '';
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error('Error during initialization:', error);
    process.exit(1);
  });
}
